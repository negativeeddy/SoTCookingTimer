@page "/"
@page "/hello"

@using SoTCookingTimer.Shared
@using System.Threading

<div class="grid-item" style="display:@buttonDisplayStyle">
    <div class="row justify-content-center">
        <div class="col">Please select the type of food you wish to cook</div>
    </div>
    <div class="row justify-content-center">
        <table style="margin:15px;">
            @foreach (var time in CookTime.CookTimes)
            {
            <tr>
                <td>
                    <button class="btn-primary" style="width:150px;margin:10px" @onclick=@(e => StartTimer(time))>@time.Name</button>
                </td>
                <td>
                    @foreach(var image in time.Images)
                    {
                    <img src="./images/@image" style="height:50px;margin-top:10px;margin-bottom:10px" />
                    }
                </td>
            </tr>
            }
        </table>
    </div>
</div>
<div class="container justify-content-center" style="display:@timerDisplayStyle;">
    <div class="row">
        <div class="col">
            @foreach(var image in CookingImages)
            {
            <img src="./images/@image" style="height:50px" />
            }
        </div>
    </div>
    <div class="row  justify-content-start">
        <div class="col">
            @CookingStage
        </div>
    </div>
    <div class="row justify-content-start">
        <div class="col" style="text-align:left">
            <CountdownTimer @ref="_timer" IsVisible="true" />
        </div>
    </div>
    <div class="row justify-content-start" style="display:@cancelDisplayStyle">
        <div class="col">
            <button class="btn-danger" @onclick="CancelTimer">Cancel</button>
        </div>
    </div>
</div>

@code
{
    private string[] CookingImages = new string[0];
    private string CookingStage;
    private CountdownTimer _timer;

    string buttonDisplayStyle = "initial";
    string timerDisplayStyle = "none";
    string cancelDisplayStyle = "initial";

    CancellationTokenSource cts = null;

    async void StartTimer(CookTime cookTime)
    {
        try
        {
            buttonDisplayStyle = "none";
            timerDisplayStyle = "initial";
            cancelDisplayStyle = "initial";

            CookingStage = $"Cooking {cookTime.Name} (raw)";
            CookingImages = cookTime.Images;
            cts = new CancellationTokenSource();

            await _timer.Run(cookTime.UndercookedSeconds, cts.Token);

            CookingStage = $"Cooking {cookTime.Name} (partially cooked)";
            StateHasChanged();
            await _timer.Run(cookTime.CookedSeconds - cookTime.UndercookedSeconds, cts.Token);

            CookingStage = $"{cookTime.Name} is cooked!";
            StateHasChanged();
            await _timer.Run(cookTime.BurnedSeconds - cookTime.CookedSeconds, cts.Token);

            CookingStage = $"{cookTime.Name} is burned!!!";
            buttonDisplayStyle = "initial";
            cancelDisplayStyle = "none";
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            buttonDisplayStyle = "initial";
            timerDisplayStyle = "none";
            cancelDisplayStyle = "initial";
            StateHasChanged();
        }
    }

    void CancelTimer()
    {
        cts.Cancel();
    }
}
