@page "/"
@page "/hello"

@using SoTCookingTimer.Shared
<div class="container">
    @if (!running)
    {
        @foreach (var time in CookTime.CookTimes)
        {
            <div class="row">
                <div class="col-sm">
                    <button @onclick=@(e => StartTimer(time))>@time.Name</button>
                </div>
                <div class="col-sm">
                    <img src="./images/@time.Image" style="height:50px" />
                </div>
            </div>
        }
    }

    <div class="row">
        <div class="col-12">
            <img src="./images/@CookingImage" style="height:50px" />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @CookingStage
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <CountdownTimer @ref="_timer" IsVisible="@running" />
        </div>
    </div>
</div>

@code
{
    private string CookingImage;
    private string CookingStage;
    private CountdownTimer _timer;

    bool running = false;


    async void StartTimer(CookTime cookTime)
    {
        running = true;
        CookingStage = "raw";
        CookingImage = cookTime.Image;

        await _timer.Run(cookTime.UndercookedSeconds);

        CookingStage = "undercooked";
        StateHasChanged();
        await _timer.Run(cookTime.CookedSeconds - cookTime.UndercookedSeconds);

        CookingStage = "cooked";
        StateHasChanged();
        await _timer.Run(cookTime.BurnedSeconds - cookTime.CookedSeconds);

        CookingStage = "burned";
        running = false;
        StateHasChanged();
    }
}
